Title: Mojolicious JsonConfig plugin
Tags: mojo, mojolicious, perl, plugin

=pod

So now the JSON configuration that i used in L<Bootylicious> and Pastelicious L<http://github.com/vti/pastelicious> is available as L<Mojolicious> plugin and was added by Sebastian Riedel to the core L<Mojo> code. The source code is available at github L<http://github.com/kraih/mojo/blob/master/lib/Mojolicious/Plugin/JsonConfig.pm>. 

[cut]

Configuration file is in JSON format but first is preprocessed by
L<Mojo::Template> that gives an access to the main application object via
C<$app> variable or C<app> helper.

An example could look like this:

    {
        "foo"       : "bar",
        "music_dir" : "<%= app->home->rel_dir('music') %>"
    }

Plugin is loaded as usual, but also returns parsed config so it is possible to use it during C<startup> stage (to load other plugins, do some general one-time configuration etc).

    # Mojolicious::Lite
    my $config = plugin('json_config');

    # Mojolicious
    my $config = $self->plugin('json_config');

Plugin is configurable. Options are C<file>, C<default> and C<stash_key>.

If C<file> is not specified it will try C<myapp.conf> file (where myapp is application's name) under the application's home directory. If file is specified as an absolute path it will be handled as expected.

Option C<default> is used when default configuration is required. When parsing is done configuration will be merged.

After configuration is preprocessed and parsed it is put into the C<stash>. The stash key is configurable through option C<stash_key>. It is C<config> by default.

The full featured example could look like this:

    my $config = plugin json_config => {
        file      => '/etc/myapp.json',
        stash_key => 'conf',
        default   => {title => 'My App'}
    };

