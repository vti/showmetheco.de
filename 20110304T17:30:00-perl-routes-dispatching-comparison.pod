Title: Perl routes dispatching comparison
Tags: Perl, routes, comparison

There are several separate distributions on CPAN that implement routes
dispatching. Below is my attempt in comparing L<Router::Simple>,
L<Path::Router>, L<HTTP::Router>, L<Routes::Tiny> and L<Path::Dispatcher>.

[cut]

    +-------------------+-------------+----------+----------+----------+---------~
    | Name              | Constraints | Optional | Grouping | Globbing | To path ~
    +-------------------+-------------+----------+----------+----------+---------~
    | Router::Simple    |      +      |    -     |    -     |    +     |    -    ~
    | Path::Router      |      +      |    +     |    -     |    -     |    +    ~
    | HTTP::Router      |      +      |    -     |    -     |    -     |    +    ~
    | Routes::Tiny      |      +      |    +     |    +     |    +     |    +    ~
    | Path::Dispatcher  |      +      |    +     |    +     |    +     |    -    ~
    +-------------------+-------------+----------+----------+----------+---------~

    ~-------------------+-----------+------+
    ~ Name              | Subroutes | PSGI |
    ~-------------------+-----------+------+
    ~ Router::Simple    |     +     |  +   |
    ~ Path::Router      |     +     |  +*  |
    ~ HTTP::Router      |     +     |  -   |
    ~ Routes::Tiny      |     -     |  -   |
    ~ Path::Dispatcher  |     +     |  +   |
    ~-------------------+-----------+------+

* via L<Plack::App::Path::Router> (thanks to Arun Prasaad)

=head1 Explanations

=head2 Constraints

Ability to limit a capture to a specific regexp. For example, we want to match
C</articles/1> but not C</article/foo>, so we add a constraint like C<\d+>.

=head2 Optional

Ability to add optional captures. For example, we want to match C</blog/2010/01>
and C</blog/2010> without specifying an additional route.

=head2 Grouping

Ability to capture not just between slashes. For example, we want to match
C</hello-user>, capturing C<hello> and C<user>.

=head2 Globbing

Ability to capture path using globbing. For example, we want to match
C</book/title/that/constains/slashes> without worring what goes after C<title>.

=head2 To path

Ability to build a path from a route. For example, we don't want to specify
paths directly in the templates, so we can use something like

    build_path('article', id => 1)

and get C</articles/1>.

=head2 Subroutes

Ability to mount subroutes on a specific route. For example, we want to add
routes that all start with C</admin/>.

=head2 PSGI support

Easy integration into C<PSGI> frameworks. Ability to match against C<PSGI>
environment.

=head1 Disclaimer

If you found any error, please correct me.
