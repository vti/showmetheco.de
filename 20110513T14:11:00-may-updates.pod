Title: May updates
Tags: Perl, CPAN

=pod

In case you use some of the following modules you might be interested in reading
what happened to them: App::TLSMe, Fliggy, Protocol::WebSocket,
Plack::Middleware::SocketIO, MojoX::Validator, Protocol::XMLRPC.

[cut]

=over 4

=item L<App::TLSme> is now on CPAN.

L<App::TLSMe> is an L<AnyEvent> TLS/SSL tunnel that transparently proxies
encrypted requests to the non-SSL applications via INET or UNIX sockets.

=item L<Fliggy> is now on CPAN too.

L<Fliggy> is L<Twiggy> with inlined Flash Policy server that eliminates the need
of running a separate service on 843 port as root.

=item L<Protocol::WebSocket> has an API change.

Due to internal UTF-8 encoding/decoding sometimes when you don't need Perl
strings and want to get just raw bytes you'd have to encode/decode manually and
introduce unneedable overhead. Now you can get Perl string and raw UTF-8 decoded
data separately by using specific methods. In L<Protocol::WebSocket::Frame>
C<to_string> now returns Perl strings instead of bytes and C<to_bytes> does the
opposite. C<next> left without a change and returns Perl strings as is did, but
a new method C<next_bytes> returns raw UTF-8 data.

=item L<Plack::Middleware::SocketIO> is now considered deprecated in favor of
L<http://github.com/vti/pocketio>.

Middlewares are not suitable for the end-point applications. Because of this
PocketIO is now built like L<Plack::App::File>. From now on you can just
mount SocketIO application as any other Plack application.

    mount '/socket.io' => PocketIO->new(handler => sub { ... });

PocketIO is already ahead of L<Plack::Middleware::SocketIO>. In particular,
various UTF-8 related bugs are fixed and connections are correctly closed.

=item L<MojoX::Validator> is now L<Input::Validator>.

Since I wanted to use L<MojoX::Validator> in L<Plack> applications I've got rid
of L<Mojolicious> dependency, but not from L<MojoX::Validator> functionality.
The new L<Input::Validator> is just the same thing with the same interface but
CPAN friendly.

=item L<Protocol::XMLRPC> is refactored.

L<Protocol::XMLRPC> is a L<XML::LibXML> based XMLRPC message parser/builder. Now
it has an improved automatic type guessing similar to L<JSON>.
